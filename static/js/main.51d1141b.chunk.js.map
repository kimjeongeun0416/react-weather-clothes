{"version":3,"sources":["logo.svg","components/Template/Template.js","components/Weather/Weather.js","components/Clothes/Clothes.js","App.js","reportWebVitals.js","index.js"],"names":["Template","children","className","Weather","props","backImage","document","querySelector","currentTemp","temperature","console","log","place","Math","round","feelTemp","minTemp","maxTemp","Clothes","winter","earlyWinter","earlySpring","spring","earlyFall","fall","earlySummer","App","useState","currentWeathers","setCurrentWeathers","lat","setLat","long","setLong","setStatus","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","currentWeather","fetch","then","response","json","name","main","temp","feels_like","temp_min","temp_max","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8PAAe,I,kBCaAA,MATf,YAAmC,IAAdC,EAAa,EAAbA,SACjB,OACI,sBAAKC,UAAU,WAAf,UACI,oBAAIA,UAAU,QAAd,gDACA,8BAAOD,Q,MCkDJE,MAvDf,SAAiBC,GAEb,IAAMC,EAAYC,SAASC,cAAc,gBACnCC,EAAcJ,EAAMK,YAoC1B,OAlCAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIN,GAkCR,sBAAKH,UAAU,cAAf,UAEI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,OAAf,SAAsB,+BAAOE,EAAMQ,UACnC,sBAAKV,UAAU,OAAf,cAAwBW,KAAKC,MAAwB,GAAlBV,EAAMK,aAAgB,GAAzD,iBAEJ,sBAAKP,UAAU,cAAf,UACI,oEAAcW,KAAKC,MAAqB,GAAfV,EAAMW,UAAa,GAA5C,cACA,oEAAcF,KAAKC,MAAoB,GAAdV,EAAMY,SAAY,GAA3C,cACA,oEAAcH,KAAKC,MAAoB,GAAdV,EAAMa,SAAY,GAA3C,qB,MCFDC,MA9Cf,SAAiBd,GACb,IAAMI,EAAcJ,EAAMI,YAGpBW,EAASX,GAAe,EACxBY,EAAcZ,EAAc,GAAKA,EAAc,EAC/Ca,EAAcb,GAAe,GAAKA,EAAc,GAChDc,EAASd,GAAe,IAAMA,EAAc,GAC5Ce,EAAYf,GAAe,IAAMA,EAAc,GAC/CgB,EAAOhB,GAAe,IAAMA,EAAc,GAC1CiB,EAAcjB,GAAe,IAAMA,EAAc,GAyBvD,OACI,qBAAKN,UAAU,cAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,OAAf,8CACA,qBAAKA,UAAU,cAAf,SAxBJiB,EACO,8FACDC,EACC,+FACAC,EACA,oHACAC,EACA,6GACAC,EACA,wFACAC,EACA,wFACAC,EACA,kFAEA,+DAUH,qBAAKvB,UAAU,OAAf,4DCqBDwB,MA1Df,SAAatB,GAAQ,IAAD,UAKlB,EAA8CuB,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAsBF,qBAAtB,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAwBJ,qBAAxB,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA4BN,qBAA5B,mBAAeO,GAAf,WAkCA,OAfAC,qBAAU,WAfHC,UAAUC,aAGbH,EAAU,eACVE,UAAUC,YAAYC,oBAAmB,SAACC,GACxCL,IACAH,EAAOQ,EAASC,OAAOC,UACvBR,EAAQM,EAASC,OAAOE,cACvB,WACDR,EAAU,wCARZA,EAAU,gDAgBVxB,QAAQC,IAAImB,EAAKE,GAEjB,IAAMW,EAAc,UA7BR,kDA6BQ,gBAAqBb,EAArB,gBAAgCE,EAAhC,kBA5BR,mCA4BQ,iBAEpBY,MAAMD,GACDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAEFjB,EAAmBiB,QAG5B,CAAChB,EAAIE,IAGN,eAAC,EAAD,WACE,cAAC,EAAD,CACEpB,MAASgB,EAAgBoB,KACzBvC,YAAW,UAAImB,EAAgBqB,YAApB,aAAI,EAAsBC,KACrCnC,SAAQ,UAAIa,EAAgBqB,YAApB,aAAI,EAAsBE,WAClCnC,QAAO,UAAIY,EAAgBqB,YAApB,aAAI,EAAsBG,SACjCnC,QAAO,UAAIW,EAAgBqB,YAApB,aAAI,EAAsBI,WAEnC,cAAC,EAAD,CACE7C,YAAW,UAAIoB,EAAgBqB,YAApB,aAAI,EAAsBC,WC/C9BI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1D,SAAS2D,eAAe,SAM1BX,M","file":"static/js/main.51d1141b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\r\nimport '../Template/Template.css';\r\n\r\n\r\nfunction Template( { children } ) {\r\n    return (\r\n        <div className='Template'>\r\n            <h2 className='Title'> 오늘 뭐입지? </h2>\r\n            <div>{ children }</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Template\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../Weather/Weather.css';\r\n\r\nfunction Weather(props) {\r\n     // 배경이미지 선택자 변수로 지정\r\n    const backImage = document.querySelector('.WeatherArea');\r\n    const currentTemp = props.temperature;  // 현재 날씨 받아오기\r\n    \r\n    console.log(currentTemp);\r\n    console.log(backImage);\r\n    // 온도별 계절 기준 정하기\r\n    const winter = currentTemp <= 4;\r\n    const earlyWinter = currentTemp > 4 && currentTemp < 9;\r\n    const earlySpring = currentTemp >= 9 && currentTemp < 12;\r\n    const spring = currentTemp >= 12 && currentTemp < 17;\r\n    const earlyFall = currentTemp >= 17 && currentTemp < 20;\r\n    const fall = currentTemp >= 20 && currentTemp < 23;\r\n    const earlySummer = currentTemp >= 23 && currentTemp < 28;\r\n    const summer = currentTemp >= 28;\r\n   \r\n\r\n    // 계절에 맞는 배경이미지 함수\r\n    const weatherBg = () => {\r\n        if (winter) {\r\n            backImage.style.backgroundImage = \"url(../images/winter.jpeg)\"; \r\n        } else if(earlyWinter) {\r\n            backImage.style.backgroundImage = \"url(../images/earlyWinter.jpeg)\"; \r\n        } else if (earlySpring) {\r\n            backImage.style.backgroundImage = \"url(../images/earlySpring.jpeg)\"; \r\n        } else if (spring) {\r\n            backImage.style.backgroundImage = \"url(/static/media/spring.jpeg)\"; \r\n        } else if (earlyFall) {\r\n            backImage.style.backgroundImage = \"url(../images/earlyFall.jpeg)\"; \r\n        } else if (fall) {\r\n            backImage.style.backgroundImage = \"url(../images/fall.jpeg)\"; \r\n        } else if (earlySummer) {\r\n            backImage.style.backgroundImage = \"url(../images/earlySummer.jpeg)\"; \r\n        } else {\r\n            backImage.style.background = \"url(../images/summer.jpeg)\"; \r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className='WeatherArea' >\r\n            \r\n            <div className='TempInfo'>\r\n                <div className='text'><span>{props.place}</span></div>\r\n                <div className='Temp'> {Math.round(props.temperature*10)/10} ℃ </div>\r\n            </div>\r\n            <div className='WeatherInfo'>\r\n                <div> 체감 기온은 {Math.round(props.feelTemp*10)/10} ℃ </div>\r\n                <div> 최저 기온은 {Math.round(props.minTemp*10)/10} ℃ </div>\r\n                <div> 최고 기온은 {Math.round(props.maxTemp*10)/10} ℃ </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import React from 'react'\r\n\r\nimport '../Clothes/Clothes.css';\r\n\r\nfunction Clothes(props) {\r\n    const currentTemp = props.currentTemp;  // 현재 날씨 받아오기\r\n    \r\n    // 온도별 계절 기준 정하기\r\n    const winter = currentTemp <= 4;\r\n    const earlyWinter = currentTemp > 4 && currentTemp < 9;\r\n    const earlySpring = currentTemp >= 9 && currentTemp < 12;\r\n    const spring = currentTemp >= 12 && currentTemp < 17;\r\n    const earlyFall = currentTemp >= 17 && currentTemp < 20;\r\n    const fall = currentTemp >= 20 && currentTemp < 23;\r\n    const earlySummer = currentTemp >= 23 && currentTemp < 28;\r\n    const summer = currentTemp >= 28;\r\n\r\n    // 계절에 맞는 옷차림 함수\r\n    const weatherClothes = () => {\r\n        if (winter) {\r\n            return \"패딩, 두꺼운 코트, 목도리, 기모제품\" \r\n        } else if(earlyWinter) {\r\n            return \"코트, 가죽자켓, 히트텍, 니트, 레깅스\"\r\n        } else if (earlySpring) {\r\n            return \"자켓, 트렌치 코트, 야상, 니트, 청바지, 스타킹\"\r\n        } else if (spring) {\r\n            return \"자켓, 가디건, 야상, 스타킹, 청바지, 면바지\"\r\n        } else if (earlyFall) {\r\n            return \"얇은 니트, 맨투맨, 가디건, 청바지\"\r\n        } else if (fall) {\r\n            return \"얇은 가디건, 긴팔, 면바지, 청바지\"\r\n        } else if (earlySummer) {\r\n            return \"반팔, 얇은 셔츠, 반바지, 면바지\"\r\n        } else {\r\n            return \"민소매, 반바지, 원피스\"\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='ClothesArea'>\r\n            <div className='ClotheBox'>\r\n                <div className='Text'>지금 날씨엔 </div>\r\n                <div className='ClothesInfo'>{weatherClothes()}</div>\r\n                <div className='Text'> 을(를) 추천해요</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Clothes\r\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Template from './components/Template/Template';\nimport Weather from './components/Weather/Weather';\nimport Clothes from './components/Clothes/Clothes';\n\nfunction App(props) {\n\n  const API_URL = 'https://api.openweathermap.org/data/2.5/weather';\n  const API_KEY = '985d94fb8f09b152b11f22b5a174090e';\n  \n  const [currentWeathers, setCurrentWeathers] = useState([]);\n  const [lat, setLat] = useState();\n  const [long, setLong] = useState();\n  const [status, setStatus] = useState();\n\n // Geolocation으로 현재 위치의 위/경도 알아오기\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStatus('Geolocation is not supported no your browser');\n    } else {\n      setStatus('Location...');\n      navigator.geolocation.getCurrentPosition((position) => {\n        setStatus();\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      }, () => {\n        setStatus('Unable to retrieve your location');\n      });\n    }\n  }\n\n  \n  useEffect(() => {\n      getLocation();\n      console.log(lat, long);\n      //let currentWeather = `${API_URL}?q=incheon&appid=${API_KEY}&units=metric`;\n      const currentWeather = `${API_URL}?lat=${lat}&lon=${long}&appid=${API_KEY}&units=metric`;\n      \n      fetch(currentWeather)\n          .then(response => response.json())\n          .then(response => {\n              //console.log(response);\n              setCurrentWeathers(response);\n          })\n\n  }, [lat,long]);\n\n  return (\n    <Template>\n      <Weather \n        place = {currentWeathers.name}\n        temperature = {currentWeathers.main?.temp}  \n        feelTemp = {currentWeathers.main?.feels_like}\n        minTemp = {currentWeathers.main?.temp_min}\n        maxTemp = {currentWeathers.main?.temp_max}\n      />\n      <Clothes \n        currentTemp = {currentWeathers.main?.temp}\n      />\n    </Template>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}